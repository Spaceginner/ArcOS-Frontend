import { get } from "svelte/store";
import icon from "../../assets/apps/errordialog.svg";
import type { App, Process } from "../applogic/interface";
import { maxZIndex } from "../applogic/store";
import { Log, LogLevel } from "../console";
import { ArcOSVersion } from "../env/main";
import {
  ErrorApps,
  ErrorButton,
  ErrorMessage,
  ErrorMessages,
  ErrorProcesses,
} from "./app";
import { generateEPID } from "../applogic/pid";

export function getErrorElement(id: string): HTMLDivElement {
  Log({
    msg: `Getting error element of ${id}`,
    source: "errorlogic/main.ts: getErrorElement",
    level: LogLevel.info,
  });

  const el = document.querySelector(`window#${id}`);

  return el as HTMLDivElement;
}

export function errorMessage(
  title: string,
  message: string,
  image?: string,
  parentId?: string,
  ...buttons: ErrorButton[]
) {
  Log({
    msg: `Generating "${title}"`,
    source: "errorlogic/main.ts: errorMessage",
    level: LogLevel.info,
  });

  const error: ErrorMessage = {
    title,
    message,
    opened: false,
    buttons,
    id: `${Math.floor(Math.random() * 1e10)}`,
    image,
    parentId,
  };

  const em = get(ErrorMessages);

  em.push(error);

  ErrorMessages.set(em);

  createErrorApp(error);
}

export function closeErrorProcess(pid: number) {
  Log({
    msg: `Closing error ${pid}`,
    source: "errorlogic/main.ts: closeError",
    level: LogLevel.info,
  });

  const errorProcesses = get(ErrorProcesses);

  delete errorProcesses[pid];

  ErrorProcesses.set(errorProcesses);
}

export function createErrorProcess(id: string) {
  Log({
    msg: `Creating error process ${id}`,
    source: "errorlogic/main.ts: openProcess",
    level: LogLevel.info,
  });

  const errorProcesses = get(ErrorProcesses);

  const errorApp = get(ErrorApps)[id];
  const errorProcess: Process = {
    app: errorApp,
    id: generateEPID(),
    pos: { x: NaN, y: NaN },
    size: errorApp.initialSize,
    windowState: errorApp.initialWindowState
  }

  errorProcesses[id] = errorProcess;

  ErrorProcesses.set(errorProcesses);
}

export function createErrorApp(errorMessage: ErrorMessage) {
  Log({
    msg: `Generating error appData for ${errorMessage.title}`,
    source: "errorlogic/main.ts: createErrorAppData",
    level: LogLevel.info,
  });

  const errorApp: App = {
    info: {
      name: errorMessage.title,
      description: "ArcOS.Desktop.ErrorLogicwindow",
      builtin: true,
      version: ArcOSVersion,
      author: "Generated by ArcOS",
      icon: errorMessage.image || icon,
    },
    initialSize: { w: NaN, h: NaN },
    minSize: { w: 200, h: NaN },
    maxSize: { w: 600, h: NaN },
    controls: { minimized: false, maximized: false, close: true },
    windowProperties: {
      headless: false,
      resizable: false,
    },
    content: null,
    glass: false,
    id: `error_${errorMessage.id}`,
    initialWindowState: { minimized: false, maximized: false, fullscreen: false },
  };

  const errorApps = get(ErrorApps);

  errorApps[errorMessage.id] = errorApp;

  ErrorApps.set(errorApps);

  setTimeout(() => {
    createErrorProcess(errorMessage.id);

    const el = document.querySelector(`window#${errorApp.id}`) as HTMLDivElement;

    if (!el)
      return Log({
        level: LogLevel.error,
        msg: `Can't bring window ${errorApp.id} to front, no associated element could be found.`,
        source: "ErrorLogic: createErrorAppData",
      });

    maxZIndex.set(get(maxZIndex) + 1);

    el.style.zIndex = `${get(maxZIndex)}`;
  }, 5);
}
